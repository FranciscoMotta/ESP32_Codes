[1/11] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D D:\Escritorio\esp32_codigos_clase\esp_6_freeRTOS_queue\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.0_py3.8_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.0/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 D:/Escritorio/esp32_codigos_clase/esp_6_freeRTOS_queue/build/bootloader/bootloader.bin"
Bootloader binary size 0x66b0 bytes. 0x950 bytes (8%) free.
[2/9] Linking C static library esp-idf\wifi_provisioning\libwifi_provisioning.a
[3/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[4/9] Linking C static library esp-idf\main\libmain.a
[5/9] Generating ld/sections.ld
[6/9] Building C object CMakeFiles/esp_6_freeRTOS_mutex.elf.dir/project_elf_src_esp32.c.obj
[7/9] Linking CXX executable esp_6_freeRTOS_mutex.elf
[8/9] Generating binary image from built executable
esptool.py v4.3
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated D:/Escritorio/esp32_codigos_clase/esp_6_freeRTOS_queue/build/esp_6_freeRTOS_mutex.bin
[9/9] cmd.exe /C "cd /D D:\Escritorio\esp32_codigos_clase\esp_6_freeRTOS_queue\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.0_py3.8_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.0/components/partition_table/check_sizes.py --offset 0x8000 partition --type app D:/Escritorio/esp32_codigos_clase/esp_6_freeRTOS_queue/build/partition_table/partition-table.bin D:/Escritorio/esp32_codigos_clase/esp_6_freeRTOS_queue/build/esp_6_freeRTOS_mutex.bin"
esp_6_freeRTOS_mutex.bin binary size 0x2b030 bytes. Smallest app partition is 0x100000 bytes. 0xd4fd0 bytes (83%) free.
